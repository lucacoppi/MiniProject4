# -*- coding: utf-8 -*-
"""MiniProject4a

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_wtb0g90ORbOkae3fHec1_Iehy7T40o_

Download the Dataset
Download the Dataset from the following link:
https://www.kaggle.com/binovi/wholesale-customers-data-set

Reading the Dataset
Read the dataset into a Pandas DataFrame!
Does the dataset include any missing values? If so, drop them!
Hint: Pandas can do that with one line of code!
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
df=pd.read_csv('wholesale.csv')
df.head()

df.isnull().sum(axis = 0)

"""Feature Selection
Either exclude the Channel and Region from the considered features or think of a way to make them meaningfully impact the analysis.
Hint: Directly using the provided numerical values for Regions is not very wise and can skew the resulting clustering!
"""

df1=df.drop(['Channel','Region'],axis=1)
df1

"""Preprocessing
Perform any needed pre-processing on the chosen features including:
Scaling;
Encoding; and
Dealing with Nan values.
Hint: Use only the preprocessing steps you think useful.
"""

df2=df.dropna()
df2

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
encoded_X = scaler.fit_transform(df2)
encoded_X

"""Clustering Using K-Means
Use a k-means instance to cluster the data.
Choose different values of k for the K-means algorithm.
Try to visualize the elbow-curve and decide from it the best k and print it.
Clustering Metrics
Print the inertia every time you try a different value for k.
"""

from sklearn.cluster import KMeans
clusters2 = KMeans(n_clusters=5, tol=1e-5, random_state=0).fit_predict(encoded_X)
print(clusters2[0:5])

Error =[]
for i in range(1, 11):
    kmeans = KMeans(n_clusters = i).fit(encoded_X)
    kmeans.fit(encoded_X)
    Error.append(kmeans.inertia_)
    print('i:', i)
    print('inertia: ',kmeans.inertia_)
import matplotlib.pyplot as plt
plt.plot(range(1, 11), Error)
plt.title('Elbow method')
plt.xlabel('No of clusters')
plt.ylabel('Error')
plt.show()

"""Challenge Yourself (Optional)
Repeat step 6 for Hierarchical Clustering.
"""

from sklearn.cluster import MeanShift
# From sklearn.cluster import MeanShift
mean_shift= MeanShift(bandwidth = 0.5)
mean_shift.fit(encoded_X)
clusters = mean_shift.predict(encoded_X) 
print('cluster centers: ',mean_shift.cluster_centers_)
print('clusters: ',clusters[0:5])