# -*- coding: utf-8 -*-
"""MiniProject4b

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14WDw_n2jDCThjGtkcdbWsD1WHt34g3Qu

Download the Dataset
Download some of the images in the following link:
https://homepages.cae.wisc.edu/~ece533/images/
Hint: fruits.png, cat.png and baboon.png are good examples.

Reading an image
Read an image using matplotlib.
Hint: You can use any alternative library for reading images. Check out OpenCV, skimage, etc.
"""

# import necessary libraries
import os
import pandas as pd
import numpy as np
from PIL import Image
from sklearn.cluster import KMeans
from joblib import dump

# import image
from google.colab import files
uploaded = files.upload()
im = Image.open("cat.png")
# display image
im

"""Re-organize
Re-organize the pixels as a 2D array with dimensions (number of pixels, 3).
In other words, a dataset with number of pixels samples and 3 columns.
"""

# get pixels of the image
pixel_np = np.asarray(im)
# reshape array (remove rows and columns)
image_height = im.height
image_width = im.width
pixel_np = np.reshape(pixel_np, (image_height * image_width, 3))
# display as df
pd.DataFrame(pixel_np, columns=["r", "g", "b"]).head()

"""Clustering
Use K-means to cluster the data into 10 clusters.
Replace each pixel by its cluster center.
Re-organize the pixels into a 3D array to show the image.
Question:
What happens to the compressed image if k increases?
"""

# run k-means clustering on the pixel data
num_of_centroids = 16 # a 4-bit image is represented by 2^4 colours
num_of_runs = 10 # number of times to run the k-means algorithm before determining the best centroids
max_iterations = 300 # number of iterations before k-means comes to an end for a single run
verbosity = 0 # show what's going on when the algorithm is running

# initiate a kmeans object
compressor = KMeans(n_clusters=num_of_centroids, n_init=num_of_runs, max_iter=max_iterations, verbose=verbosity)
# run k-means clustering
compressor.fit(pixel_np)

# save the fitted model
dump(compressor, "compressor.joblib")

# create an array replacing each pixel label with its corresponding cluster centroid
pixel_centroid = np.array([list(compressor.cluster_centers_[label]) for label in compressor.labels_])

# convert the array to an unsigned integer type
pixel_centroid = pixel_centroid.astype("uint8")
# reshape this array according to the height and width of our image
pixel_centroids_reshaped = np.reshape(pixel_centroid, (image_height, image_width, 3), "C")

"""Save the image
Save the image as compressed.png.
Is there a difference in the sizes of the two images?
"""

# create the compressed image
compressed_im = Image.fromarray(pixel_centroids_reshaped)
# save compressed image
compressed_im.save("cat_compressed.png")
# display compressed image
compressed_im

image=Image.open("cat.png")
width, height = image.size #extract width and height from output tuple.
print(width, height)

image1=Image.open("cat_compressed.png")
width, height = image1.size #extract width and height from output tuple.
print(width, height)